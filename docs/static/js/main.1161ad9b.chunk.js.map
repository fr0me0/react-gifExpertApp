{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GixExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGIfs","GixExpertApp","categories","divRoot","document","getElementById","ReactDOM","render"],"mappings":"yMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OAEI,sBAAMC,SAZW,SAAEC,GAEnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SArBc,SAAEP,GAExBF,EAAeE,EAAEQ,OAAOF,a,QCNnBG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAErC,OACI,sBAAKC,UAAU,2CAAf,UACI,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,4BAAKA,Q,uBCPJK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbN,EAFa,iDAEoCO,UAAUF,GAF9C,+DAGAG,MAAOR,GAHP,cAGbS,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAVvB,kBAcZY,GAdY,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAEfrB,mBAAS,CAC9B2B,KAAM,GACNO,SAAS,IAJ2B,mBAElCC,EAFkC,KAE3BC,EAF2B,KAsBxC,OAfAC,qBAAW,WAEPjB,EAASC,GAEJiB,MAAM,SAAAR,GACHS,YAAW,WACPH,EAAS,CACLT,KAAMG,EACNI,SAAS,MAEd,WAGZ,CAAEb,IAEEc,EDnB0BK,CAAcnB,GAAlCU,EAFwB,EAE7BJ,KAAaO,EAFgB,EAEhBA,QAErB,OACI,qCACI,oBAAIjB,UAAU,mCAAd,SAAmDI,IACjDa,GAAW,mBAAGjB,UAAU,mCAAb,wBACb,qBAAKA,UAAU,YAAf,SAEYc,EAAOF,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAESA,GADCA,EAAIhB,aEZ7B2B,EAAe,WAAO,IAAD,EAEQzC,mBAAS,CAAE,mBAFnB,mBAEtB0C,EAFsB,KAEV3C,EAFU,KAI9B,OAEI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQ2C,EAAWb,KAAK,SAAAR,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,YCX5BsB,G,MAAUC,SAASC,eAAe,SAExCC,IAASC,OAAQ,cAAC,EAAD,IAAkBJ,K","file":"static/js/main.1161ad9b.chunk.js","sourcesContent":["import { useState } from \"react\"\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange = ( e ) => {\n\n        setInputValue( e.target.value );\n\n    };\n    const handleSubmit = ( e ) => {\n\n        e.preventDefault();\n        if( inputValue.trim().length > 2 ){\n            setCategories( cats => [ inputValue, ...cats ] );\n            setInputValue('');\n        };\n\n    };\n\n    return (\n\n        <form onSubmit={ handleSubmit }>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInputChange }\n            />\n        </form>\n\n    );\n    \n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n\n    return (\n        <div className=\"card animate__animated animate__backInUp\">\n            <img src={ url } alt={ title }/>\n            <p>{ title }</p>\n        </div>\n    )\n    \n}\n","export const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=YMTydYuGUH1Zvox8xcWVAo3N3m51NXch`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n\n};\n","import { GifGridItem } from './GifGridItem';\n\nimport { useFetchGIfs } from \"../hooks/useFetchGifs\";\n\nexport const GifGrid = ({ category }) => {\n    \n    const { data:images, loading } = useFetchGIfs( category );\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__flash\">{ category }</h3>\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\n            <div className=\"card-grid\">\n                    {\n                        images.map( (img) => (\n                            <GifGridItem \n                                key={ img.id }\n                                { ...img }\n                            />\n                        ))\n                    }\n            </div>\n        </>\n    )\n\n};","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGIfs = ( category ) => {\n\n    const[state, setState] = useState({\n        data: [],\n        loading: true,\n    });\n\n    useEffect( () => {\n\n        getGifs( category )\n        \n            .then( img => {\n                setTimeout(() => {\n                    setState({\n                        data: img,\n                        loading: false\n                    });\n                }, 1500);\n            });\n\n    }, [ category ]);\n\n    return state;\n\n};","import { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nexport const GixExpertApp = () => {\n \n    const [ categories, setCategories ] = useState([ 'Cyberpunk 2077' ]);\n\n    return (\n\n        <>\n            <h2>GifExpertApp</h2>   \n            <AddCategory setCategories={ setCategories }/>\n            <hr/>\n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid \n                            key={ category }\n                            category={ category }\n                        />\n                    ))\n                }\n            </ol>\n        </>\n\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GixExpertApp } from './GixExpertApp';\n\nimport './index.css';\n\nconst divRoot = document.getElementById('root');\n\nReactDOM.render( <GixExpertApp />, divRoot );"],"sourceRoot":""}